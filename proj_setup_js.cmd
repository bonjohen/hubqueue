@echo off
setlocal enabledelayedexpansion

echo ===== JavaScript Project Setup =====

REM Check if project name is provided
if "%~1"=="" (
    echo ERROR: Project name is required.
    echo Usage: proj_setup_js.cmd project_name
    exit /b 1
)

set PROJECT_NAME=%~1
set PROJECT_DIR=%CD%\%PROJECT_NAME%

REM Check if project directory already exists
if exist "%PROJECT_DIR%" (
    echo ERROR: Directory "%PROJECT_NAME%" already exists.
    echo Please choose a different project name or delete the existing directory.
    exit /b 1
)

REM Check if Node.js is installed
where node >nul 2>nul
if %ERRORLEVEL% neq 0 (
    echo ERROR: Node.js is not installed or not in your PATH.
    echo Please install Node.js from https://nodejs.org/
    exit /b 1
)

echo Creating JavaScript project: %PROJECT_NAME%

REM Create project directory structure
echo Creating directory structure...
mkdir "%PROJECT_DIR%"
mkdir "%PROJECT_DIR%\src"
mkdir "%PROJECT_DIR%\test"
mkdir "%PROJECT_DIR%\docs"

REM Create package.json
echo Creating package.json...
(
echo {
echo   "name": "%PROJECT_NAME%",
echo   "version": "1.0.0",
echo   "description": "A JavaScript project",
echo   "main": "src/index.js",
echo   "scripts": {
echo     "test": "jest",
echo     "start": "node src/index.js",
echo     "lint": "eslint src",
echo     "format": "prettier --write \"src/**/*.js\" \"test/**/*.js\""
echo   },
echo   "keywords": [],
echo   "author": "Your Name <your.email@example.com>",
echo   "license": "MIT",
echo   "dependencies": {},
echo   "devDependencies": {
echo     "eslint": "^8.40.0",
echo     "eslint-config-prettier": "^8.8.0",
echo     "eslint-plugin-jest": "^27.2.1",
echo     "jest": "^29.5.0",
echo     "prettier": "^2.8.8"
echo   }
echo }
) > "%PROJECT_DIR%\package.json"

REM Create .gitignore
echo Creating .gitignore...
(
echo # Logs
echo logs
echo *.log
echo npm-debug.log*
echo yarn-debug.log*
echo yarn-error.log*
echo.
echo # Runtime data
echo pids
echo *.pid
echo *.seed
echo *.pid.lock
echo.
echo # Directory for instrumented libs generated by jscoverage/JSCover
echo lib-cov
echo.
echo # Coverage directory used by tools like istanbul
echo coverage
echo.
echo # nyc test coverage
echo .nyc_output
echo.
echo # node-waf configuration
echo .lock-wscript
echo.
echo # Compiled binary addons (https://nodejs.org/api/addons.html)
echo build/Release
echo.
echo # Dependency directories
echo node_modules/
echo jspm_packages/
echo.
echo # TypeScript v1 declaration files
echo typings/
echo.
echo # Optional npm cache directory
echo .npm
echo.
echo # Optional eslint cache
echo .eslintcache
echo.
echo # Optional REPL history
echo .node_repl_history
echo.
echo # Output of 'npm pack'
echo *.tgz
echo.
echo # dotenv environment variable files
echo .env
echo.
echo # IDE files
echo .idea/
echo .vscode/
echo *.swp
echo *.swo
echo.
echo # Mac files
echo .DS_Store
) > "%PROJECT_DIR%\.gitignore"

REM Create README.md
echo Creating README.md...
(
echo # %PROJECT_NAME%
echo.
echo A JavaScript project.
echo.
echo ## Installation
echo.
echo ```bash
echo # Clone the repository
echo git clone https://github.com/yourusername/%PROJECT_NAME%.git
echo cd %PROJECT_NAME%
echo.
echo # Install dependencies
echo npm install
echo ```
echo.
echo ## Usage
echo.
echo ```javascript
echo // Import the module
echo const { hello } = require('%PROJECT_NAME%');
echo.
echo // Use the module
echo console.log(hello('World'));
echo ```
echo.
echo ## Development
echo.
echo ```bash
echo # Run tests
echo npm test
echo.
echo # Run linting
echo npm run lint
echo.
echo # Format code
echo npm run format
echo.
echo # Start the application
echo npm start
echo ```
echo.
echo ## License
echo.
echo [MIT](LICENSE)
) > "%PROJECT_DIR%\README.md"

REM Create index.js
echo Creating index.js...
(
echo /**
echo  * Main module for the %PROJECT_NAME% package.
echo  */
echo.
echo /**
echo  * Returns a greeting message.
echo  * @param {string} name - The name to greet.
echo  * @returns {string} A greeting message.
echo  */
echo function hello(name) {
echo   return `Hello, ${name}!`;
echo }
echo.
echo // Export functions
echo module.exports = {
echo   hello,
echo };
echo.
echo // Run if this file is executed directly
echo if (require.main === module) {
echo   console.log(hello('World'));
echo }
) > "%PROJECT_DIR%\src\index.js"

REM Create sample test
echo Creating sample test...
(
echo /**
echo  * Tests for the main module.
echo  */
echo.
echo const { hello } = require('../src/index');
echo.
echo describe('hello function', () => {
echo   test('returns correct greeting', () => {
echo     expect(hello('World')).toBe('Hello, World!');
echo     expect(hello('JavaScript')).toBe('Hello, JavaScript!');
echo   });
echo });
) > "%PROJECT_DIR%\test\index.test.js"

REM Create .eslintrc.js
echo Creating .eslintrc.js...
(
echo module.exports = {
echo   env: {
echo     node: true,
echo     commonjs: true,
echo     es2021: true,
echo     jest: true,
echo   },
echo   extends: ['eslint:recommended', 'prettier'],
echo   parserOptions: {
echo     ecmaVersion: 12,
echo   },
echo   rules: {
echo     'no-console': 'off',
echo     'no-unused-vars': 'warn',
echo   },
echo };
) > "%PROJECT_DIR%\.eslintrc.js"

REM Create .prettierrc
echo Creating .prettierrc...
(
echo {
echo   "singleQuote": true,
echo   "trailingComma": "es5",
echo   "printWidth": 80,
echo   "tabWidth": 2,
echo   "semi": true
echo }
) > "%PROJECT_DIR%\.prettierrc"

REM Create jest.config.js
echo Creating jest.config.js...
(
echo module.exports = {
echo   testEnvironment: 'node',
echo   collectCoverage: true,
echo   coverageDirectory: 'coverage',
echo   collectCoverageFrom: ['src/**/*.js'],
echo   coverageThreshold: {
echo     global: {
echo       branches: 80,
echo       functions: 80,
echo       lines: 80,
echo       statements: 80,
echo     },
echo   },
echo };
) > "%PROJECT_DIR%\jest.config.js"

REM Create LICENSE file
echo Creating LICENSE file...
(
echo MIT License
echo.
echo Copyright ^(c^) 2023 Your Name
echo.
echo Permission is hereby granted, free of charge, to any person obtaining a copy
echo of this software and associated documentation files ^(the "Software"^), to deal
echo in the Software without restriction, including without limitation the rights
echo to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
echo copies of the Software, and to permit persons to whom the Software is
echo furnished to do so, subject to the following conditions:
echo.
echo The above copyright notice and this permission notice shall be included in all
echo copies or substantial portions of the Software.
echo.
echo THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
echo IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
echo FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
echo AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
echo LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
echo OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
echo SOFTWARE.
) > "%PROJECT_DIR%\LICENSE"

REM Create .npmrc
echo Creating .npmrc...
(
echo save-exact=true
echo package-lock=true
) > "%PROJECT_DIR%\.npmrc"

REM Create .nvmrc for Node.js version management
echo Creating .nvmrc...
for /f "tokens=1,2,3 delims=." %%a in ('node --version') do (
    echo v%%a.%%b.%%c > "%PROJECT_DIR%\.nvmrc"
)

echo.
echo JavaScript project "%PROJECT_NAME%" created successfully!
echo.
echo To get started:
echo   1. cd %PROJECT_NAME%
echo   2. npm install
echo   3. npm test
echo   4. npm start
echo.
echo Happy coding!

endlocal
